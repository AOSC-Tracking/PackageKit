<!DOCTYPE node PUBLIC
"-//freedesktop//DTD D-BUS Object Introspection 1.0//EN"
"http://www.freedesktop.org/standards/dbus/1.0/introspect.dtd" [
  <!ENTITY ERROR_GENERAL "org.freedesktop.PackageKit.Denied">
]>
<node name="/" xmlns:doc="http://www.freedesktop.org/dbus/1.0/doc.dtd">
  <interface name="org.freedesktop.PackageKit.Transaction">
    <doc:doc>
      <doc:description>
        <doc:para>
          The transaction interface is used for interacting with indervidual transactions.
        </doc:para>
      </doc:description>
    </doc:doc>

    <!--*****************************************************************************************-->
    <method name="AcceptEula">
      <annotation name="org.freedesktop.DBus.GLib.Async" value=""/>
      <doc:doc>
        <doc:description>
          <doc:para>
            This method allows the user to accept a end user licence agreement.
          </doc:para>
        </doc:description>
        <doc:permission>Callers need the org.freedesktop.packagekit.accept-eula</doc:permission>
      </doc:doc>
      <arg type="s" name="eula_id" direction="in">
        <doc:doc>
          <doc:summary>
            <doc:para>
              A valid EULA ID
            </doc:para>
          </doc:summary>
        </doc:doc>
      </arg>
    </method>

    <!--*****************************************************************************************-->
    <method name="Cancel">
      <doc:doc>
        <doc:description>
          <doc:para>
            This method cancels a transaction that is already running
          </doc:para>
        </doc:description>
      </doc:doc>
    </method>

    <!--*****************************************************************************************-->
    <method name="GetAllowCancel">
      <doc:doc>
        <doc:description>
          <doc:para>
            Get if cancel is allowed for the transaction
          </doc:para>
        </doc:description>
      </doc:doc>
      <arg type="b" name="allow_cancel" direction="out">
        <doc:doc>
          <doc:summary>
            <doc:para>
              If cancel is allowed
            </doc:para>
          </doc:summary>
        </doc:doc>
      </arg>
    </method>

    <!--*****************************************************************************************-->
    <method name="GetDepends">
      <annotation name="org.freedesktop.DBus.GLib.Async" value=""/>
      <doc:doc>
        <doc:description>
          <doc:para>
            This method returns packages that this package depends on.
          </doc:para>
          <doc:para>
            This method typically emits
            <literal>Progress</literal>,
            <literal>Status</literal> and
            <literal>Error</literal> and
            <literal>Package</literal>.
          </doc:para>
          <doc:para>
            <literal>Package</literal> enumerated types should be
            <literal>available</literal> or <literal>installed</literal>.
          </doc:para>
        </doc:description>
      </doc:doc>
      <arg type="s" name="filter" direction="in">
        <doc:doc>
          <doc:summary>
            <doc:para>
              A correct filter, e.g. <literal>none</literal> or <literal>installed;~devel</literal>
            </doc:para>
          </doc:summary>
        </doc:doc>
      </arg>
      <arg type="as" name="package_ids" direction="in">
        <doc:doc>
          <doc:summary>
            <doc:para>
              An array of package IDs.
            </doc:para>
          </doc:summary>
        </doc:doc>
      </arg>
      <arg type="b" name="recursive" direction="in">
        <doc:doc>
          <doc:summary>
            <doc:para>
              Either <literal>true</literal> or <literal>false</literal>. If yes then the requirements should be
              returned for all packages returned.
              This means if gnome-power-manager depends on NetworkManager
              and NetworkManager depends on HAL, then GetDepends on
              gnome-power-manager should return both HAL and NetworkManager.
            </doc:para>
          </doc:summary>
        </doc:doc>
      </arg>
    </method>

    <!--*****************************************************************************************-->
    <method name="GetDetails">
      <annotation name="org.freedesktop.DBus.GLib.Async" value=""/>
      <doc:doc>
        <doc:description>
          <doc:para>
            This method should return all the details about a specific
            <literal>package_id</literal>.
          </doc:para>
          <doc:para>
            This method typically emits
            <literal>Progress</literal>,
            <literal>Status</literal> and
            <literal>Error</literal> and
            <literal>Details</literal>.
          </doc:para>
        </doc:description>
      </doc:doc>
      <arg type="as" name="package_ids" direction="in">
        <doc:doc>
          <doc:summary>
            <doc:para>
              An array of package IDs.
            </doc:para>
          </doc:summary>
        </doc:doc>
      </arg>
    </method>

    <!--*****************************************************************************************-->
    <method name="GetFiles">
      <annotation name="org.freedesktop.DBus.GLib.Async" value=""/>
      <doc:doc>
        <doc:description>
          <doc:para>
            This method should return the file list of the <literal>package_id</literal>.
          </doc:para>
          <doc:para>
            This method typically emits
            <literal>Progress</literal>,
            <literal>Status</literal> and
            <literal>Error</literal> and
            <literal>Files</literal>.
          </doc:para>
        </doc:description>
      </doc:doc>
      <arg type="as" name="package_ids" direction="in">
        <doc:doc>
          <doc:summary>
            <doc:para>
              An array of package IDs.
            </doc:para>
          </doc:summary>
        </doc:doc>
      </arg>
    </method>

    <!--*****************************************************************************************-->
    <method name="GetOldTransactions">
      <doc:doc>
        <doc:description>
          <doc:para>
            This method allows a client to view details for old transactions.
          </doc:para>
        </doc:description>
      </doc:doc>
      <arg type="u" name="number" direction="in">
        <doc:doc>
          <doc:summary>
            <doc:para>
              The number of past transactions, or 0 for all known transactions.
            </doc:para>
          </doc:summary>
        </doc:doc>
      </arg>
    </method>

    <!--*****************************************************************************************-->
    <method name="GetPackageLast">
      <doc:doc>
        <doc:description>
          <doc:para>
            This method emits the package that was last emmitted from the daemon.
            This allows any GUI that is monitoring transactions to accurately reflect the current
            state of the transaction at startup.
          </doc:para>
        </doc:description>
      </doc:doc>
      <arg type="s" name="package" direction="out">
        <doc:doc>
          <doc:summary>
            <doc:para>
              The last package_id.
            </doc:para>
          </doc:summary>
        </doc:doc>
      </arg>
    </method>

    <!--*****************************************************************************************-->
    <method name="GetPackages">
      <annotation name="org.freedesktop.DBus.GLib.Async" value=""/>
      <doc:doc>
        <doc:description>
          <doc:para>
            This method returns all the packages without a search term.
          </doc:para>
          <doc:para>
            This method typically emits
            <literal>Progress</literal>,
            <literal>Error</literal> and
            <literal>Package</literal>.
          </doc:para>
          <doc:para>
            <literal>Package</literal> enumerated types should be
            <literal>available</literal> or <literal>installed</literal>.
          </doc:para>
        </doc:description>
      </doc:doc>
      <arg type="s" name="filter" direction="in">
        <doc:doc>
          <doc:summary>
            <doc:para>
              A correct filter, e.g. <literal>none</literal> or <literal>installed;~devel</literal>
            </doc:para>
          </doc:summary>
        </doc:doc>
      </arg>
    </method>

    <!--*****************************************************************************************-->
    <method name="GetProgress">
      <doc:doc>
        <doc:description>
          <doc:para>
            This method gets the progress completion of the daemon.
          </doc:para>
        </doc:description>
      </doc:doc>
      <arg type="u" name="percentage" direction="out">
        <doc:doc>
          <doc:summary>
            <doc:para>
              The percentage complete of the whole transaction.
            </doc:para>
          </doc:summary>
        </doc:doc>
      </arg>
      <arg type="u" name="subpercentage" direction="out">
        <doc:doc>
          <doc:summary>
            <doc:para>
              The percentage complete of the individual task, for example, downloading.
            </doc:para>
          </doc:summary>
        </doc:doc>
      </arg>
      <arg type="u" name="elapsed" direction="out">
        <doc:doc>
          <doc:summary>
            <doc:para>
              The amount of time elapsed during the transaction.
            </doc:para>
          </doc:summary>
        </doc:doc>
      </arg>
      <arg type="u" name="remaining" direction="out">
        <doc:doc>
          <doc:summary>
            <doc:para>
              The estimated remamining time of the transaction, or 0 if not known.
            </doc:para>
          </doc:summary>
        </doc:doc>
      </arg>
    </method>

    <!--*****************************************************************************************-->
    <method name="GetRepoList">
      <annotation name="org.freedesktop.DBus.GLib.Async" value=""/>
      <doc:doc>
        <doc:description>
          <doc:para>
            This method returns the list of repositories used in the system.
          </doc:para>
          <doc:para>
            This method should emit <literal>RepoDetail</literal>.
          </doc:para>
        </doc:description>
      </doc:doc>
      <arg type="s" name="filter" direction="in">
        <doc:doc>
          <doc:summary>
            <doc:para>
              A correct filter, e.g. <literal>none</literal> or <literal>installed;~devel</literal>
            </doc:para>
          </doc:summary>
        </doc:doc>
      </arg>
    </method>

    <!--*****************************************************************************************-->
    <method name="GetRequires">
      <annotation name="org.freedesktop.DBus.GLib.Async" value=""/>
      <doc:doc>
        <doc:description>
          <doc:para>
            This method returns packages that depend on this package.
            This is useful to know, as if <literal>package_id</literal> is being
            removed, we can warn the user what else would be removed.
          </doc:para>
          <doc:para>
            This method typically emits
            <literal>Progress</literal>,
            <literal>Status</literal> and
            <literal>Error</literal> and
            <literal>Package</literal>.
          </doc:para>
          <doc:para>
            <literal>Package</literal> enumerated types should be
            <literal>available</literal> or <literal>installed</literal>.
          </doc:para>
        </doc:description>
      </doc:doc>
      <arg type="s" name="filter" direction="in">
        <doc:doc>
          <doc:summary>
            <doc:para>
              A correct filter, e.g. <literal>none</literal> or <literal>installed;~devel</literal>
            </doc:para>
          </doc:summary>
        </doc:doc>
      </arg>
      <arg type="as" name="package_ids" direction="in">
        <doc:doc>
          <doc:summary>
            <doc:para>
              An array of package IDs.
            </doc:para>
          </doc:summary>
        </doc:doc>
      </arg>
      <arg type="b" name="recursive" direction="in">
        <doc:doc>
          <doc:summary>
            <doc:para>
              Either <literal>true</literal> or <literal>false</literal>. If yes then the requirements should be
              returned for all packages returned.
              This means if gnome-power-manager depends on NetworkManager
              and NetworkManager depends on HAL, then GetRequires on
              HAL should return both gnome-power-manager and NetworkManager.
            </doc:para>
          </doc:summary>
        </doc:doc>
      </arg>
    </method>

    <!--*****************************************************************************************-->
    <method name="GetRole">
      <doc:doc>
        <doc:description>
          <doc:para>
            This method returns the current role of the transaction.
          </doc:para>
        </doc:description>
      </doc:doc>
      <arg type="s" name="role" direction="out">
        <doc:doc>
          <doc:summary>
            <doc:para>
              The PkRoleEnum in text form.
            </doc:para>
          </doc:summary>
        </doc:doc>
      </arg>
      <arg type="s" name="package_id" direction="out">
        <doc:doc>
          <doc:summary>
            <doc:para>
              The original package_id that was used to start the transaction.
            </doc:para>
          </doc:summary>
        </doc:doc>
      </arg>
    </method>

    <!--*****************************************************************************************-->
    <method name="GetStatus">
      <doc:doc>
        <doc:description>
          <doc:para>
            This method returns the status of the transaction.
          </doc:para>
        </doc:description>
      </doc:doc>
      <arg type="s" name="status" direction="out">
        <doc:doc>
          <doc:summary>
            <doc:para>
              The PkStatusEnum in string form.
            </doc:para>
          </doc:summary>
        </doc:doc>
      </arg>
    </method>

    <!--*****************************************************************************************-->
    <method name="GetUpdateDetail">
      <annotation name="org.freedesktop.DBus.GLib.Async" value=""/>
      <doc:doc>
        <doc:description>
          <doc:para>
            This method returns details about a specific update.
          </doc:para>
          <doc:para>
            This method typically emits
            <literal>UpdateDetail</literal> and
            <literal>Error</literal>
          </doc:para>
        </doc:description>
      </doc:doc>
      <arg type="as" name="package_ids" direction="in">
        <doc:doc>
          <doc:summary>
            <doc:para>
              An array of package IDs.
            </doc:para>
          </doc:summary>
        </doc:doc>
      </arg>
    </method>

    <!--*****************************************************************************************-->
    <method name="GetUpdates">
      <annotation name="org.freedesktop.DBus.GLib.Async" value=""/>
      <doc:doc>
        <doc:description>
          <doc:para>
            This method should return a list of packages that are installed and are upgradable.
            It should only return the newest update for each installed package.
          </doc:para>
          <doc:para>
            This method typically emits
            <literal>Progress</literal>,
            <literal>Error</literal> and
            <literal>Package</literal>.
          </doc:para>
          <doc:para>
            <literal>Package</literal> enumerated types should be
            <literal>blocked</literal>,
            <literal>low</literal>,
            <literal>normal</literal>,
            <literal>important</literal> or
            <literal>security</literal>.
          </doc:para>
          <doc:para>
            The status <literal>blocked</literal> signifies the package cannot be
            updated, probably due to other dependencies not being met.
            This type allows the GUI tools to show to the user that an update
            exists, but cannot be installed.
            The reason for it not being installed should be put into the update
            description when doing GetUpdateDetail.
          </doc:para>
          <doc:para>
            A filter such as <literal>basename</literal> or <literal>gui</literal>
            is also useful if you want to do filtering on the method to only show
            the main packages rather than the complete list.
            The complete list is available but specifying <literal>none</literal>
            as the filter.
            Using no filter which may be useful in advanced tools or when using
            libpackagekit and searching for an update of a specific name.
            Other filter types may be present, but can be safely ignored of the
            backend does not support them.
          </doc:para>
        </doc:description>
      </doc:doc>
      <arg type="s" name="filter" direction="in">
        <doc:doc>
          <doc:summary>
            <doc:para>
              A correct filter, e.g. <literal>none</literal> or <literal>installed;~devel</literal>
            </doc:para>
          </doc:summary>
        </doc:doc>
      </arg>
    </method>

    <!--*****************************************************************************************-->
    <method name="InstallFiles">
      <annotation name="org.freedesktop.DBus.GLib.Async" value=""/>
      <doc:doc>
        <doc:description>
          <doc:para>
            This method installs local package files onto the local system.
          </doc:para>
          <doc:para>
            The installer should always install extra dependant packages automatically.
          </doc:para>
          <doc:para>
            This method typically emits
            <literal>Progress</literal>,
            <literal>Status</literal> and
            <literal>Error</literal> and
            <literal>Package</literal>.
          </doc:para>
          <doc:para>
            <literal>Package</literal> enumerated types should be
            <literal>downloading</literal>,
            <literal>updating</literal>,
            <literal>installing</literal> or
            <literal>removing</literal>.
          </doc:para>
        </doc:description>
        <doc:permission>Callers need the org.freedesktop.packagekit.localinstall-untrusted</doc:permission>
      </doc:doc>
      <arg type="b" name="trusted" direction="in">
        <doc:doc>
          <doc:summary>
            <doc:para>
              If the package is trusted, i.e. if it has a pre-trusted security signature.
            </doc:para>
          </doc:summary>
        </doc:doc>
      </arg>
      <arg type="as" name="full_paths" direction="in">
        <doc:doc>
          <doc:summary>
            <doc:para>
              An array of full path and filenames to packages.
            </doc:para>
          </doc:summary>
        </doc:doc>
      </arg>
    </method>

    <!--*****************************************************************************************-->
    <method name="InstallPackages">
      <annotation name="org.freedesktop.DBus.GLib.Async" value=""/>
      <doc:doc>
        <doc:description>
          <doc:para>
            This method installs new packages on the local system.
          </doc:para>
          <doc:para>
            The installer should always install extra packages automatically
            as the use could call GetDepends prior to the install if a confirmation
            is required in the UI.
          </doc:para>
          <doc:para>
            This method typically emits
            <literal>Progress</literal>,
            <literal>Status</literal> and
            <literal>Error</literal> and
            <literal>Package</literal>.
          </doc:para>
          <doc:para>
            <literal>Package</literal> enumerated types should be
            <literal>downloading</literal>,
            <literal>updating</literal>,
            <literal>installing</literal> or
            <literal>removing</literal>.
          </doc:para>
        </doc:description>
        <doc:permission>Callers need the org.freedesktop.packagekit.install</doc:permission>
      </doc:doc>
      <arg type="as" name="package_ids" direction="in">
        <doc:doc>
          <doc:summary>
            <doc:para>
              An array of package IDs.
            </doc:para>
          </doc:summary>
        </doc:doc>
      </arg>
    </method>

    <!--*****************************************************************************************-->
    <method name="InstallSignature">
      <annotation name="org.freedesktop.DBus.GLib.Async" value=""/>
      <doc:doc>
        <doc:description>
          <doc:para>
            This method allows us to install new security keys.
          </doc:para>
        </doc:description>
        <doc:permission>Callers need the org.freedesktop.packagekit.install-signature</doc:permission>
      </doc:doc>
      <arg type="s" name="sig_type" direction="in">
        <doc:doc>
          <doc:summary>
            <doc:para>
              A key type, e.g. <literal>gpg</literal>
            </doc:para>
          </doc:summary>
        </doc:doc>
      </arg>
      <arg type="s" name="key_id" direction="in">
        <doc:doc>
          <doc:summary>
            <doc:para>
              A key ID, e.g. <literal>BB7576AC</literal>
            </doc:para>
          </doc:summary>
        </doc:doc>
      </arg>
      <arg type="s" name="package_id" direction="in">
        <doc:doc>
          <doc:summary>
            <doc:para>
              A PackageID for the package that the user is trying to install
            </doc:para>
          </doc:summary>
        </doc:doc>
      </arg>
    </method>

    <!--*****************************************************************************************-->
    <method name="IsCallerActive">
      <doc:doc>
        <doc:description>
          <doc:para>
            This method allows us to find if the original caller of the method is still connected
            to the session bus.
            This is usually an indication that the client can handle it's own error handling and
            EULA callbacks rather than another program taking over.
          </doc:para>
        </doc:description>
      </doc:doc>
      <arg type="b" name="is_active" direction="out">
        <doc:doc>
          <doc:summary>
            <doc:para>
              If the client is still connected.
            </doc:para>
          </doc:summary>
        </doc:doc>
      </arg>
    </method>

    <!--*****************************************************************************************-->
    <method name="RefreshCache">
      <annotation name="org.freedesktop.DBus.GLib.Async" value=""/>
      <doc:doc>
        <doc:description>
          <doc:para>
            This method should fetch updated meta-data for all enabled repositories.
            This operation should be only scheduled when the computer is idle as
            the network connection will be very active, and will the computer will
            have have non-trivial levels of hard disk and processor activity.
            For these reasons, it should not be done automatically when on battery
            power.
          </doc:para>
          <doc:para>
            This method typically emits
            <literal>Progress</literal>,
            <literal>Error</literal> and
            <literal>Package</literal>.
          </doc:para>
        </doc:description>
        <doc:permission>Callers need the org.freedesktop.packagekit.refresh-cache</doc:permission>
      </doc:doc>
      <arg type="b" name="force" direction="in">
        <doc:doc>
          <doc:summary>
            <doc:para>
              If the caches should be cleaned and reloaded even if there is valid, up to date data.
            </doc:para>
          </doc:summary>
        </doc:doc>
      </arg>
    </method>

    <!--*****************************************************************************************-->
    <method name="RemovePackages">
      <annotation name="org.freedesktop.DBus.GLib.Async" value=""/>
      <doc:doc>
        <doc:description>
          <doc:para>
            This method removes packages from the local system.
          </doc:para>
          <doc:para>
            This method typically emits
            <literal>Progress</literal>,
            <literal>Status</literal> and
            <literal>Error</literal> and
            <literal>Package</literal>.
          </doc:para>
          <doc:para>
            <literal>Package</literal> enumerated types should be
            <literal>downloading</literal>,
            <literal>updating</literal>,
            <literal>installing</literal> or
            <literal>removing</literal>.
          </doc:para>
        </doc:description>
        <doc:permission>Callers need the org.freedesktop.packagekit.remove</doc:permission>
      </doc:doc>
      <arg type="as" name="package_ids" direction="in">
        <doc:doc>
          <doc:summary>
            <doc:para>
              An array of package IDs.
            </doc:para>
          </doc:summary>
        </doc:doc>
      </arg>
      <arg type="b" name="allow_deps" direction="in">
        <doc:doc>
          <doc:summary>
            <doc:para>
              Either <literal>true</literal> or <literal>false</literal>.
              If <literal>true</literal> allow other packages to be removed with the package,
              but <literal>false</literal> should cause the script to abort if other packages
              are dependant on the package.
            </doc:para>
          </doc:summary>
        </doc:doc>
      </arg>
      <arg type="b" name="autoremove" direction="in">
        <doc:doc>
          <doc:summary>
            <doc:para>
              Either <literal>true</literal> or <literal>false</literal>.
              This option is only really interesting on embedded devices with a limited amount of
              flash storage.
              It suggests to the packagekit backend that dependencies installed at the same time as
              the package should also be removed if they are not required by anything else.
              For instance, if you install OpenOffice, it might download libneon as a dependency.
              When <literal>auto_remove</literal> is set to true, and you remove OpenOffice then
              libneon will also get removed automatically.
            </doc:para>
          </doc:summary>
        </doc:doc>
      </arg>
    </method>

    <!--*****************************************************************************************-->
    <method name="RepoEnable">
      <annotation name="org.freedesktop.DBus.GLib.Async" value=""/>
      <doc:doc>
        <doc:description>
          <doc:para>
            This method enables the repository specified.
          </doc:para>
        </doc:description>
        <doc:permission>Callers need the org.freedesktop.packagekit.repo-change</doc:permission>
      </doc:doc>
      <arg type="s" name="repo_id" direction="in">
        <doc:doc>
          <doc:summary>
            <doc:para>
              A repository identifier, e.g. <literal>fedora-development-debuginfo</literal>
            </doc:para>
          </doc:summary>
        </doc:doc>
      </arg>
      <arg type="b" name="enabled" direction="in">
        <doc:doc>
          <doc:summary>
            <doc:para>
              <literal>true</literal> if enabled, <literal>false</literal> if disabled.
            </doc:para>
          </doc:summary>
        </doc:doc>
      </arg>
    </method>

    <!--*****************************************************************************************-->
    <method name="RepoSetData">
      <annotation name="org.freedesktop.DBus.GLib.Async" value=""/>
      <doc:doc>
        <doc:description>
          <doc:para>
            This method allows arbitary data to be passed to the repository handler.
          </doc:para>
        </doc:description>
        <doc:permission>Callers need the org.freedesktop.packagekit.repo-change</doc:permission>
      </doc:doc>
      <arg type="s" name="repo_id" direction="in">
        <doc:doc>
          <doc:summary>
            <doc:para>
              A repository identifier, e.g. <literal>fedora-development-debuginfo</literal>
            </doc:para>
          </doc:summary>
        </doc:doc>
      </arg>
      <arg type="s" name="parameter" direction="in">
        <doc:doc>
          <doc:summary>
            <doc:para>
              The backend specific value, e.g. <literal>set-download-url</literal>.
            </doc:para>
          </doc:summary>
        </doc:doc>
      </arg>
      <arg type="s" name="value" direction="in">
        <doc:doc>
          <doc:summary>
            <doc:para>
              The backend specific value, e.g. <literal>http://foo.bar.org/baz</literal>.
            </doc:para>
          </doc:summary>
        </doc:doc>
      </arg>
    </method>

    <!--*****************************************************************************************-->
    <method name="Resolve">
      <annotation name="org.freedesktop.DBus.GLib.Async" value=""/>
      <doc:doc>
        <doc:description>
          <doc:para>
            This method turns a single package name into a package_id suitable for the
            other methods.
          </doc:para>
          <doc:para>
            This method typically emits
            <literal>Error</literal> and
            <literal>Package</literal>.
          </doc:para>
          <doc:para>
            <literal>Package</literal> enumerated types should be
            <literal>available</literal> or <literal>installed</literal>.
          </doc:para>
        </doc:description>
      </doc:doc>
      <arg type="s" name="filter" direction="in">
        <doc:doc>
          <doc:summary>
            <doc:para>
              A correct filter, e.g. <literal>none</literal> or <literal>installed;~devel</literal>
            </doc:para>
          </doc:summary>
        </doc:doc>
      </arg>
      <arg type="as" name="package" direction="in">
        <doc:doc>
          <doc:summary>
            <doc:para>
              An array of package names, e.g. <literal>scribus-clipart</literal>.
            </doc:para>
          </doc:summary>
        </doc:doc>
      </arg>
    </method>

    <!--*****************************************************************************************-->
    <method name="Rollback">
      <annotation name="org.freedesktop.DBus.GLib.Async" value=""/>
      <doc:doc>
        <doc:description>
          <doc:para>
            This method rolls back the package database to a previous transaction.
          </doc:para>
        </doc:description>
        <doc:permission>Callers need the org.freedesktop.packagekit.rollback</doc:permission>
      </doc:doc>
      <arg type="s" name="transaction_id" direction="in">
        <doc:doc>
          <doc:summary>
            <doc:para>
              A valid transaction ID.
            </doc:para>
          </doc:summary>
        </doc:doc>
      </arg>
    </method>

    <!--*****************************************************************************************-->
    <method name="SearchDetails">
      <annotation name="org.freedesktop.DBus.GLib.Async" value=""/>
      <doc:doc>
        <doc:description>
          <doc:para>
            This method allows deeper searching than SearchName().
          </doc:para>
          <doc:para>
            Do not refresh the package cache. This should be fast.
            This is very similar to search-name.
            This should search as much data as possible, including, if possible
            repo names, package summaries, descriptions and URLs.
          </doc:para>
          <doc:para>
            This method typically emits
            <literal>Progress</literal>,
            <literal>Error</literal> and
            <literal>Package</literal>.
          </doc:para>
          <doc:para>
            <literal>Package</literal> enumerated types should be
            <literal>available</literal> or <literal>installed</literal>.
          </doc:para>        </doc:description>
      </doc:doc>
      <arg type="s" name="filter" direction="in">
        <doc:doc>
          <doc:summary>
            <doc:para>
              A correct filter, e.g. <literal>none</literal> or <literal>installed;~devel</literal>
            </doc:para>
          </doc:summary>
        </doc:doc>
      </arg>
      <arg type="s" name="search" direction="in">
        <doc:doc>
          <doc:summary>
            <doc:para>
              A single word search term with no wildcard chars.
            </doc:para>
          </doc:summary>
        </doc:doc>
      </arg>
    </method>

    <!--*****************************************************************************************-->
    <method name="SearchFile">
      <annotation name="org.freedesktop.DBus.GLib.Async" value=""/>
      <doc:doc>
        <doc:description>
          <doc:para>
            This method searches for files on the local system and files in available packages.
          </doc:para>
          <doc:para>
            This should search for files.
            This should allow an application to find out what package owns
            a file on the system.
          </doc:para>
          <doc:para>
            This method typically emits
            <literal>Progress</literal>,
            <literal>Error</literal> and
            <literal>Package</literal>.
          </doc:para>
          <doc:para>
            <literal>Package</literal> enumerated types should be
            <literal>available</literal> or <literal>installed</literal>.
          </doc:para>        </doc:description>
      </doc:doc>
      <arg type="s" name="filter" direction="in">
        <doc:doc>
          <doc:summary>
            <doc:para>
              A correct filter, e.g. <literal>none</literal> or <literal>installed;~devel</literal>
            </doc:para>
          </doc:summary>
        </doc:doc>
      </arg>
      <arg type="s" name="search" direction="in">
        <doc:doc>
          <doc:summary>
            <doc:para>
              A single local path on the system
            </doc:para>
          </doc:summary>
        </doc:doc>
      </arg>
    </method>

    <!--*****************************************************************************************-->
    <method name="SearchGroup">
      <annotation name="org.freedesktop.DBus.GLib.Async" value=""/>
      <doc:doc>
        <doc:description>
          <doc:para>
            This method returns packages from a given group enumerated type.
          </doc:para>
          <doc:para>
            Do not refresh the package cache. This should be fast.
          </doc:para>
          <doc:para>
            This method typically emits
            <literal>Progress</literal>,
            <literal>Error</literal> and
            <literal>Package</literal>.
          </doc:para>
          <doc:para>
            <literal>Package</literal> enumerated types should be
            <literal>available</literal> or <literal>installed</literal>.
          </doc:para>
        </doc:description>
      </doc:doc>
      <arg type="s" name="filter" direction="in">
        <doc:doc>
          <doc:summary>
            <doc:para>
              A correct filter, e.g. <literal>none</literal> or <literal>installed;~devel</literal>
            </doc:para>
          </doc:summary>
        </doc:doc>
      </arg>
      <arg type="s" name="search" direction="in">
        <doc:doc>
          <doc:summary>
            <doc:para>
              An enumerated group_type, or <literal>unknown</literal>
            </doc:para>
          </doc:summary>
        </doc:doc>
      </arg>
    </method>

    <!--*****************************************************************************************-->
    <method name="SearchName">
      <annotation name="org.freedesktop.DBus.GLib.Async" value=""/>
      <doc:doc>
        <doc:description>
          <doc:para>
            This method searches the package database by package name.
          </doc:para>
          <doc:para>
            Do not refresh the package cache. This should be fast.
          </doc:para>
          <doc:para>
            Try to emit <literal>installed</literal> before
            <literal>available</literal> packages first, as it allows the client
            program to perform the GUI filtering and matching whilst the daemon is
            running the transaction.
          </doc:para>
          <doc:para>
            If the backend includes <literal>installed</literal> and
            <literal>available</literal> versions of the same package when searching
            then the <literal>available</literal> version will have to be filtered
            in the backend.
          </doc:para>
          <doc:para>
            The search query in the backend should not be case sensitive, and
            should not be sensitive to <literal>_</literal> or <literal>-</literal>.
          </doc:para>
          <doc:para>
            The search methods should return all results in all repositories.
            This may mean that multiple versions of package are returned.
            If this is not what is wanted by the client program, then the
            <literal>newest</literal> filter should be used.
          </doc:para>
          <doc:para>
            This method typically emits
            <literal>Progress</literal>,
            <literal>Error</literal> and
            <literal>Package</literal>.
          </doc:para>
          <doc:para>
            <literal>Package</literal> enumerated types should be
            <literal>available</literal> or <literal>installed</literal>.
          </doc:para>
        </doc:description>
      </doc:doc>
      <arg type="s" name="filter" direction="in">
        <doc:doc>
          <doc:summary>
            <doc:para>
              A correct filter, e.g. <literal>none</literal> or <literal>installed;~devel</literal>
            </doc:para>
          </doc:summary>
        </doc:doc>
      </arg>
      <arg type="s" name="search" direction="in">
        <doc:doc>
          <doc:summary>
            <doc:para>
              A single word search term with no wildcard chars
            </doc:para>
          </doc:summary>
        </doc:doc>
      </arg>
    </method>

    <!--*****************************************************************************************-->
    <method name="UpdatePackages">
      <annotation name="org.freedesktop.DBus.GLib.Async" value=""/>
      <doc:doc>
        <doc:description>
          <doc:para>
            This method updates existing packages on the local system.
          </doc:para>
          <doc:para>
            The installer should always update extra packages automatically to fulfil dependencies.
          </doc:para>
          <doc:para>
            This should allow an application to find out what package owns a file on the system.
          </doc:para>
          <doc:para>
            This method typically emits
            <literal>Progress</literal>,
            <literal>Status</literal> and
            <literal>Error</literal> and
            <literal>Package</literal>.
          </doc:para>
        </doc:description>
        <doc:permission>Callers need the org.freedesktop.packagekit.update-package</doc:permission>
      </doc:doc>
      <arg type="as" name="package_ids" direction="in">
        <doc:doc>
          <doc:summary>
            <doc:para>
              An array of package IDs.
            </doc:para>
          </doc:summary>
        </doc:doc>
      </arg>
    </method>

    <!--*****************************************************************************************-->
    <method name="UpdateSystem">
      <annotation name="org.freedesktop.DBus.GLib.Async" value=""/>
      <doc:doc>
        <doc:description>
          <doc:para>
            This method updates all packages on the system to thier newest versions.
          </doc:para>
          <doc:para>
            The installer should update all the updateable packages on the system,
            including automatically installing any new packages that are needed for
            dependancies.
          </doc:para>
        </doc:description>
          <doc:para>
            This method typically emits
            <literal>Progress</literal>,
            <literal>Error</literal> and
            <literal>RequireRestart</literal> and
            <literal>Package</literal>.
          </doc:para>
          <doc:para>
            <literal>Package</literal> enumerated types should be
            <literal>downloading</literal>,
            <literal>updating</literal>,
            <literal>installing</literal> or
            <literal>removing</literal>.
          </doc:para>
        <doc:permission>Callers need the org.freedesktop.packagekit.update-system</doc:permission>
      </doc:doc>
    </method>

    <!--*****************************************************************************************-->
    <method name="WhatProvides">
      <annotation name="org.freedesktop.DBus.GLib.Async" value=""/>
      <doc:doc>
        <doc:description>
          <doc:para>
            This method returns packages that provide the supplied attributes.
            This method is useful for finding out what package(s) provide a modalias
            or GStreamer codec string.
          </doc:para>
          <doc:para>
            This method typically emits
            <literal>Progress</literal>,
            <literal>Status</literal> and
            <literal>Error</literal> and
            <literal>Package</literal>.
          </doc:para>
          <doc:para>
            <literal>Package</literal> enumerated types should be
            <literal>available</literal> or <literal>installed</literal>.
          </doc:para>
        </doc:description>
      </doc:doc>
      <arg type="s" name="filter" direction="in">
        <doc:doc>
          <doc:summary>
            <doc:para>
              A correct filter, e.g. <literal>none</literal> or <literal>installed;~devel</literal>
            </doc:para>
          </doc:summary>
        </doc:doc>
      </arg>
      <arg type="s" name="type" direction="in">
        <doc:doc>
          <doc:summary>
            <doc:para>
              A PkProvideType, e.g. <literal>PK_PROVIDES_ENUM_CODEC</literal>.
            </doc:para>
          </doc:summary>
        </doc:doc>
      </arg>
      <arg type="s" name="search" direction="in">
        <doc:doc>
          <doc:summary>
            <doc:para>
              The data to send to the backend to get the packages.
              Note: This is backend specific.
            </doc:para>
          </doc:summary>
        </doc:doc>
      </arg>
    </method>

    <!--*****************************************************************************************-->
    <signal name="AllowCancel">
      <doc:doc>
        <doc:description>
          <doc:para>
            This signal is sent when the backend decides that the transaction can no longer be
            cancelled, or is now able to be cancelled.
          </doc:para>
        </doc:description>
      </doc:doc>
      <arg type="b" name="allow_cancel" direction="out">
        <doc:doc>
          <doc:summary>
            <doc:para>
              If the backend is in a cancelable state.
            </doc:para>
          </doc:summary>
        </doc:doc>
      </arg>
    </signal>

    <!--*****************************************************************************************-->
    <signal name="CallerActiveChanged">
      <doc:doc>
        <doc:description>
          <doc:para>
            This signal is emitted when the session program that started the transaction exits.
          </doc:para>
        </doc:description>
      </doc:doc>
      <arg type="b" name="is_active" direction="out">
        <doc:doc>
          <doc:summary>
            <doc:para>
              If the caller is active, usually FALSE.
            </doc:para>
          </doc:summary>
        </doc:doc>
      </arg>
    </signal>

    <!--*****************************************************************************************-->
    <signal name="Details">
      <doc:doc>
        <doc:description>
          <doc:para>
            This signal allows the backend to convey more details about the package.
          </doc:para>
        </doc:description>
      </doc:doc>
      <arg type="s" name="package_id" direction="out">
        <doc:doc>
          <doc:summary>
            <doc:para>
              The package ID
            </doc:para>
          </doc:summary>
        </doc:doc>
      </arg>
      <arg type="s" name="license" direction="out">
        <doc:doc>
          <doc:summary>
            <doc:para>
              The license, e.g. <literal>GPLv2+</literal> or <literal>proprietary</literal>.
            </doc:para>
          </doc:summary>
        </doc:doc>
      </arg>
      <arg type="s" name="group" direction="out">
        <doc:doc>
          <doc:summary>
            <doc:para>
              The enumerated package group description
            </doc:para>
          </doc:summary>
        </doc:doc>
      </arg>
      <arg type="s" name="detail" direction="out">
        <doc:doc>
          <doc:summary>
            <doc:para>
              The multi-line package description.
              NOTE: Tabs may have to be stripped from the description to avoid being split.
            </doc:para>
          </doc:summary>
        </doc:doc>
      </arg>
      <arg type="s" name="url" direction="out">
        <doc:doc>
          <doc:summary>
            <doc:para>
              The upstream project homepage
            </doc:para>
          </doc:summary>
        </doc:doc>
      </arg>
      <arg type="t" name="size" direction="out">
        <doc:doc>
          <doc:summary>
            <doc:para>
              The size of the package in bytes. This should be the size of the entire package file,
              not the size of the files installed on the system.
            </doc:para>
          </doc:summary>
        </doc:doc>
      </arg>
    </signal>

    <!--*****************************************************************************************-->
    <signal name="ErrorCode">
      <doc:doc>
        <doc:description>
          <doc:para>
            This signal is used to report errors back to the session program.
          </doc:para>
          <doc:para>
            Errors should only be send on fatal abort.
          </doc:para>
        </doc:description>
      </doc:doc>
      <arg type="s" name="code" direction="out">
        <doc:doc>
          <doc:summary>
            <doc:para>
              Enumerated type, e.g. <literal>no-network</literal>.
            </doc:para>
          </doc:summary>
        </doc:doc>
      </arg>
      <arg type="s" name="details" direction="out">
        <doc:doc>
          <doc:summary>
            <doc:para>
              Long description or error, e.g. <literal>failed to connect to mytry.xml</literal>
            </doc:para>
          </doc:summary>
        </doc:doc>
      </arg>
    </signal>

    <!--*****************************************************************************************-->
    <signal name="Files">
      <doc:doc>
        <doc:description>
          <doc:para>
            This signal is used to push file lists from the backend to the session.
          </doc:para>
        </doc:description>
      </doc:doc>
      <arg type="s" name="package_id" direction="out">
        <doc:doc>
          <doc:summary>
            <doc:para>
              The Package ID that called the method.
            </doc:para>
          </doc:summary>
        </doc:doc>
      </arg>
      <arg type="s" name="file_list" direction="out">
        <doc:doc>
          <doc:summary>
            <doc:para>
              The file list, with each file seporated with <literal>;</literal>.
            </doc:para>
          </doc:summary>
        </doc:doc>
      </arg>
    </signal>

    <!--*****************************************************************************************-->
    <signal name="Finished">
      <doc:doc>
        <doc:description>
          <doc:para>
            This signal is used to signal that the transaction has finished.
          </doc:para>
        </doc:description>
      </doc:doc>
      <arg type="s" name="exit" direction="out">
        <doc:doc>
          <doc:summary>
            <doc:para>
              The PkExitEnum describing the exit status of the transaction.
            </doc:para>
          </doc:summary>
        </doc:doc>
      </arg>
      <arg type="u" name="runtime" direction="out">
        <doc:doc>
          <doc:summary>
            <doc:para>
              The amount of time in ms that the transaction ran for.
            </doc:para>
          </doc:summary>
        </doc:doc>
      </arg>
    </signal>

    <!--*****************************************************************************************-->
    <signal name="Message">
      <doc:doc>
        <doc:description>
          <doc:para>
            This signal is sent when the backend wants to send a message to the session.
          </doc:para>
          <doc:para>
            This allows the backend to queue up a message to be shown after the transaction has
            completed.
          </doc:para>
        </doc:description>
      </doc:doc>
      <arg type="s" name="type" direction="out">
        <doc:doc>
          <doc:summary>
            <doc:para>
              One of <literal>warning</literal>, <literal>notice</literal>, or
              <literal>daemon</literal>.
            </doc:para>
          </doc:summary>
        </doc:doc>
      </arg>
      <arg type="s" name="details" direction="out">
        <doc:doc>
          <doc:summary>
            <doc:para>
              Required details about the message, non-localised.
            </doc:para>
          </doc:summary>
        </doc:doc>
      </arg>
    </signal>

    <!--*****************************************************************************************-->
    <signal name="Package">
      <doc:doc>
        <doc:description>
          <doc:para>
            This signal allows the backend to communicate packages to the session.
          </doc:para>
          <doc:para>
            If updating, as packages are updated then emit them to the screen.
            This allows a summary to be presented after the transaction.
          </doc:para>
          <doc:para>
            When returning results from a search always return
            <literal>installed</literal> before <literal>available</literal> for
            the same package name.
          </doc:para>
        </doc:description>
      </doc:doc>
      <arg type="s" name="info" direction="out">
        <doc:doc>
          <doc:summary>
            <doc:para>
              A valid <literal>info</literal> string enumerated type
            </doc:para>
          </doc:summary>
        </doc:doc>
      </arg>
      <arg type="s" name="package_id" direction="out">
        <doc:doc>
          <doc:summary>
            <doc:para>
              A valid package ID string with as much data as known
            </doc:para>
          </doc:summary>
        </doc:doc>
      </arg>
      <arg type="s" name="summary" direction="out">
        <doc:doc>
          <doc:summary>
            <doc:para>
              The one line package summary, e.g. Clipart for OpenOffice
            </doc:para>
          </doc:summary>
        </doc:doc>
      </arg>
    </signal>

    <!--*****************************************************************************************-->
    <signal name="ProgressChanged">
      <doc:doc>
        <doc:description>
          <doc:para>
            This signal describes the completion of the transaction.
          </doc:para>
          <doc:para>
            This is optional.
            Backends should send the percentage fields to 101 if the amount complete
            cannot be calculated.
          </doc:para>
        </doc:description>
      </doc:doc>
      <arg type="u" name="percentage" direction="out">
        <doc:doc>
          <doc:summary>
            <doc:para>
              The percentage complete of the whole transaction.
            </doc:para>
          </doc:summary>
        </doc:doc>
      </arg>
      <arg type="u" name="subpercentage" direction="out">
        <doc:doc>
          <doc:summary>
            <doc:para>
              The percentage complete of the individual task, for example, downloading.
            </doc:para>
          </doc:summary>
        </doc:doc>
      </arg>
      <arg type="u" name="elapsed" direction="out">
        <doc:doc>
          <doc:summary>
            <doc:para>
              The amount of time in seconds this transaction has been in the
              running state
            </doc:para>
          </doc:summary>
        </doc:doc>
      </arg>
      <arg type="u" name="remaining" direction="out">
        <doc:doc>
          <doc:summary>
            <doc:para>
              The amount of time in seconds this transaction will take to
              complete. Zero is sent for unknown.
            </doc:para>
          </doc:summary>
        </doc:doc>
      </arg>
    </signal>

    <!--*****************************************************************************************-->
    <signal name="RepoDetail">
      <doc:doc>
        <doc:description>
          <doc:para>
            This signal describes a repository on the system.
          </doc:para>
        </doc:description>
      </doc:doc>
      <arg type="s" name="repo_id" direction="out">
        <doc:doc>
          <doc:summary>
            <doc:para>
              The repository ID.
            </doc:para>
          </doc:summary>
        </doc:doc>
      </arg>
      <arg type="s" name="description" direction="out">
        <doc:doc>
          <doc:summary>
            <doc:para>
              A description of the repository.
            </doc:para>
          </doc:summary>
        </doc:doc>
      </arg>
      <arg type="b" name="enabled" direction="out">
        <doc:doc>
          <doc:summary>
            <doc:para>
              If the repository is enabled and in use.
            </doc:para>
          </doc:summary>
        </doc:doc>
      </arg>
    </signal>

    <!--*****************************************************************************************-->
    <signal name="RepoSignatureRequired">
      <doc:doc>
        <doc:description>
          <doc:para>
            This signal is emitted when a transaction is not possible due to a missing security
            certificate.
          </doc:para>
          <doc:para>
            Some backends support repositories which use a cryptographic
            signature, such as GPG. If a package cannot be installed
            because it is signed with a key that has not been verified,
            this signal is generated so the user can choose to accept or
            decline the key.
          </doc:para>
          <doc:para>
            This signal includes information that can be used to verify
            that the key should be trusted, such as a URL for the company
            or person who owns the key, the key's ID, the userid of
            the key creator, and the date the key was generated.
          </doc:para>
        </doc:description>
      </doc:doc>
      <arg type="s" name="package_id" direction="out">
        <doc:doc>
          <doc:summary>
            <doc:para>
              A package ID for the package that is trying to be installed
            </doc:para>
          </doc:summary>
        </doc:doc>
      </arg>
      <arg type="s" name="repository_name" direction="out">
        <doc:doc>
          <doc:summary>
            <doc:para>
              The name of the repository associated with the provided key.
            </doc:para>
          </doc:summary>
        </doc:doc>
      </arg>
      <arg type="s" name="key_url" direction="out">
        <doc:doc>
          <doc:summary>
            <doc:para>
              The URL provided with the key.
            </doc:para>
          </doc:summary>
        </doc:doc>
      </arg>
      <arg type="s" name="key_userid" direction="out">
        <doc:doc>
          <doc:summary>
            <doc:para>
              The user id associated with the key.
            </doc:para>
          </doc:summary>
        </doc:doc>
      </arg>
      <arg type="s" name="key_id" direction="out">
        <doc:doc>
          <doc:summary>
            <doc:para>
              A unique identifier for the key.
            </doc:para>
          </doc:summary>
        </doc:doc>
      </arg>
      <arg type="s" name="key_fingerprint" direction="out">
        <doc:doc>
          <doc:summary>
            <doc:para>
              The hashed fingerprint of the key.
            </doc:para>
          </doc:summary>
        </doc:doc>
      </arg>
      <arg type="s" name="key_timestamp" direction="out">
        <doc:doc>
          <doc:summary>
            <doc:para>
              The date the key was created.
            </doc:para>
          </doc:summary>
        </doc:doc>
      </arg>
      <arg type="s" name="type" direction="out">
        <doc:doc>
          <doc:summary>
            <doc:para>
              The type of signature used. <literal>gpg</literal>, for example.
            </doc:para>
          </doc:summary>
        </doc:doc>
      </arg>
    </signal>

    <!--*****************************************************************************************-->
    <signal name="EulaRequired">
      <doc:doc>
        <doc:description>
          <doc:para>
            This signal is emitted when a transaction is not possible due to a EULA that needs to
            be agreed to at install time.
          </doc:para>
          <doc:para>
            Some backends support EULAs, which have to be agreed to before the install can proceed.
          </doc:para>
        </doc:description>
      </doc:doc>
      <arg type="s" name="eula_id" direction="out">
        <doc:doc>
          <doc:summary>
            <doc:para>
              The <literal>eula_id</literal> which identifies the EULA - this is provided
              so that if a specific EULA has previously agreed to a EULA from Acme Corp it is
              not asked again.
              An example <literal>eula_id</literal>'s is <literal>vmware5_single_user</literal>.
            </doc:para>
          </doc:summary>
        </doc:doc>
      </arg>
      <arg type="s" name="package_id" direction="out">
        <doc:doc>
          <doc:summary>
            <doc:para>
              A package ID for the package that is trying to be installed.
            </doc:para>
          </doc:summary>
        </doc:doc>
      </arg>
      <arg type="s" name="vendor_name" direction="out">
        <doc:doc>
          <doc:summary>
            <doc:para>
              The vendor that is providing the EULA.
            </doc:para>
          </doc:summary>
        </doc:doc>
      </arg>
      <arg type="s" name="license_agreement" direction="out">
        <doc:doc>
          <doc:summary>
            <doc:para>
              The full text EULA.
            </doc:para>
          </doc:summary>
        </doc:doc>
      </arg>
    </signal>

    <!--*****************************************************************************************-->
    <signal name="RequireRestart">
      <doc:doc>
        <doc:description>
          <doc:para>
            This signal is sent when the session program should notify the user that a restart is
            required.
          </doc:para>
          <doc:para>
            This is optional, but highly recommended.
          </doc:para>
          <doc:para>
            This can be sent as many times as needed by the backend script.
            PackageKit will always choose the 'worst' method in the UI notification.
          </doc:para>
        </doc:description>
      </doc:doc>
      <arg type="s" name="type" direction="out">
        <doc:doc>
          <doc:summary>
            <doc:para>
              One of <literal>system</literal>, <literal>application</literal> or
              <literal>session</literal>.
            </doc:para>
          </doc:summary>
        </doc:doc>
      </arg>
      <arg type="s" name="details" direction="out">
        <doc:doc>
          <doc:summary>
            <doc:para>
              Optional details about the restart
            </doc:para>
          </doc:summary>
        </doc:doc>
      </arg>
    </signal>

    <!--*****************************************************************************************-->
    <signal name="StatusChanged">
      <doc:doc>
        <doc:description>
          <doc:para>
            This signal is sent when the status of the transaction has changed.
          </doc:para>
          <doc:para>
            This is optional, but highly recommended.
            It gives the GUI tools a chance to show a different icon to show what stage the
            transaction is in, for instance, a downloading icon can be shown whilst in the
            <literal>download</literal> state.
          </doc:para>
        </doc:description>
      </doc:doc>
      <arg type="s" name="status" direction="out">
        <doc:doc>
          <doc:summary>
            <doc:para>
              One of <literal>download</literal>, <literal>install</literal>,
              <literal>update</literal> or <literal>remove</literal>.
            </doc:para>
          </doc:summary>
        </doc:doc>
      </arg>
    </signal>

    <!--*****************************************************************************************-->
    <signal name="Transaction">
      <doc:doc>
        <doc:description>
          <doc:para>
            This signal is sent when more details are required about a specific transaction.
          </doc:para>
        </doc:description>
      </doc:doc>
      <arg type="s" name="old_tid" direction="out">
        <doc:doc>
          <doc:summary>
            <doc:para>
              The transaction ID of the old transaction.
            </doc:para>
          </doc:summary>
        </doc:doc>
      </arg>
      <arg type="s" name="timespec" direction="out">
        <doc:doc>
          <doc:summary>
            <doc:para>
              The timespec of the old transaction.
            </doc:para>
          </doc:summary>
        </doc:doc>
      </arg>
      <arg type="b" name="succeeded" direction="out">
        <doc:doc>
          <doc:summary>
            <doc:para>
              If the transaction succeeded.
            </doc:para>
          </doc:summary>
        </doc:doc>
      </arg>
      <arg type="s" name="role" direction="out">
        <doc:doc>
          <doc:summary>
            <doc:para>
              The role enumerated type.
            </doc:para>
          </doc:summary>
        </doc:doc>
      </arg>
      <arg type="u" name="duration" direction="out">
        <doc:doc>
          <doc:summary>
            <doc:para>
              The duration of the transaction in seconds.
            </doc:para>
          </doc:summary>
        </doc:doc>
      </arg>
      <arg type="s" name="data" direction="out">
        <doc:doc>
          <doc:summary>
            <doc:para>
              Any data associated with the transaction.
            </doc:para>
          </doc:summary>
        </doc:doc>
      </arg>
    </signal>

    <!--*****************************************************************************************-->
    <signal name="UpdateDetail">
      <doc:doc>
        <doc:description>
          <doc:para>
            This signal is sent when more details are required about a specific update.
          </doc:para>
        </doc:description>
      </doc:doc>
      <arg type="s" name="package_id" direction="out">
        <doc:doc>
          <doc:summary>
            <doc:para>
              The package ID
            </doc:para>
          </doc:summary>
        </doc:doc>
      </arg>
      <arg type="s" name="updates" direction="out">
        <doc:doc>
          <doc:summary>
            <doc:para>
              A list of package_id's that are to be updated, seporated by <literal>^</literal>.
              This odd delimited was chosen as <literal>\t</literal> is already being used in the
              spawned backends, and <literal>^</literal> is a banned character in a package_id.
              This will change in 0.3.x where <literal>updates</literal> will be a proper string
              array field.
            </doc:para>
          </doc:summary>
        </doc:doc>
      </arg>
      <arg type="s" name="obsoletes" direction="out">
        <doc:doc>
          <doc:summary>
            <doc:para>
              A list of package_id's that are to be obsoleted, seporated by <literal>^</literal>
              This will change in 0.3.x where <literal>obsoletes</literal> will be a proper string
              array field.
            </doc:para>
          </doc:summary>
        </doc:doc>
      </arg>
      <arg type="s" name="vendor_url" direction="out">
        <doc:doc>
          <doc:summary>
            <doc:para>
              A URL with more details on the update, e.g. a page with more
              information on the update.
              The format of this command should be
              <literal>http://www.foo.org/page.html?4567;Update to SELinux</literal>
            </doc:para>
          </doc:summary>
        </doc:doc>
      </arg>
      <arg type="s" name="bugzilla_url" direction="out">
        <doc:doc>
          <doc:summary>
            <doc:para>
              A bugzilla URL with more details on the update.
              If no URL is available then this field should be left empty.
            </doc:para>
          </doc:summary>
        </doc:doc>
      </arg>
      <arg type="s" name="cve_url" direction="out">
        <doc:doc>
          <doc:summary>
            <doc:para>
              A CVE URL with more details on the security advisory.
            </doc:para>
          </doc:summary>
        </doc:doc>
      </arg>
      <arg type="s" name="restart" direction="out">
        <doc:doc>
          <doc:summary>
            <doc:para>
              A valid restart type, e.g. <literal>system</literal>.
            </doc:para>
          </doc:summary>
        </doc:doc>
      </arg>
      <arg type="s" name="update_text" direction="out">
        <doc:doc>
          <doc:summary>
            <doc:para>
              The update text describing the update in a non-localised way.
              Newlines should be converted to <literal>;</literal> before printed.
            </doc:para>
          </doc:summary>
        </doc:doc>
      </arg>
    </signal>

  </interface>
</node>

