<?xml version='1.0' encoding='ISO-8859-1'?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
"http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd" [

<!-- Process this file with docbook-to-man to generate an nroff manual
     page: `docbook-to-man manpage.xml > manpage.1'.  You may view
     the manual page with: `docbook-to-man manpage.xml | nroff -man |
     less'.  A typical entry in a Makefile or Makefile.am is:

manpage.1: manpage.xml
	docbook-to-man $< > $@

	The docbook-to-man binary is found in the docbook-to-man package.
	Please remember that if you create the nroff version in one of the
	debian/rules file targets (such as build), you will need to include
	docbook-to-man in your Build-Depends control field.
  -->

  <!-- Please adjust the date whenever revising the manpage. -->
  <!ENTITY date        "<date>31 July,2008</date>">
  <!-- SECTION should be 1-8, maybe w/ subsection other parameters are
       allowed: see man(7), man(1). -->
  <!ENTITY package     "pkgenpack">
  <!ENTITY gnu         "<acronym>GNU</acronym>">
  <!ENTITY gpl         "&gnu; <acronym>GPL</acronym>">
]>

<refentry>
  <refentryinfo>
    <copyright>
      <year>2008</year>
      <holder>Shishir Goel</holder>
    </copyright>
    &date;
  </refentryinfo>
  <refmeta>
    <refentrytitle>pkgenpack</refentrytitle>
    <manvolnum>1</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>&package;</refname>
    <refpurpose>PackageKit Pack Generator</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <cmdsynopsis>
      <command>&package;</command>
      <arg><option>options</option></arg>
      <arg><option>path</option></arg>
      <arg><option>package ..</option></arg>
    </cmdsynopsis>
  </refsynopsisdiv>
  <refsect1>
    <title>Description</title>
    <para>
      This manual page documents briefly the <command>&package;</command> command.
    </para>
    <para>
      <command>&package;</command> is the command line client for PackageKit for creating service packs.
    </para>
  </refsect1>
  <refsect1>
    <title>What is a Service Pack?</title>
    <para>
      A service pack is a tarball which contains the particular package and its dependencies.
      The user can select the dependencies to be packed using the --with-package-list option.
      Along with the dependencies, a service pack has a file named metadata.conf which contains
      the information like distro_id and date of creation of the pack.
    </para>
  </refsect1>
  <refsect1>
    <title>Creating a Service Pack?</title>
    <para>
      A service pack can be created using pkgenpack. When creating a pack, the user needs to specify
      a valid path for the service pack and the package for which the pack has to be created.
    </para>
  </refsect1>
  <refsect1>
    <title>Options</title>
    <para>
      --with-package-list
    </para>
    <para>
      allows the user to explicitly specify the file list of packages from which the dependencies
        are to be excluded. Generally, the file list of packages is generated using
      pk-generate-package-list on the target system. If not used, pkgenpack
        uses /var/lib/PackageKit/package-list.txt by default.
    </para>
    <para>
      --verbose or -v
    </para>
    <para>
      presents the debugging details to the user.
    </para>
  </refsect1>
  <refsect1>
    <title>Naming a Service Pack</title>
    <para>
     The only valid extension for a service pack is ".servicepack". The user needs to specify
     the full path of the pack, when using pkgenpack to generate a service pack.
    </para>
  </refsect1>
  <refsect1>
    <title>Examples</title>
    <para>
      1. Tim is facing problems with his Internet connection at home. He needs a service pack
      with valgrind and it's dependancies for his system. He asks James to generate a pack for him. Both know
      James's system should contain similar packages as Tim's system, as both of them
      have installed Fedora 9 two days ago. James simply runs:
    </para>
    <para>
      [james@jamesbook:~]$pkgenpack /media/USB/TimPacks/valgrind.servicepack valgrind
    </para>
    <para>
     This generates a file valgrind.servicepack on the USB key Tim gave to James. Tim can now go home,
     insert the USB key and double click on the valgrind.servicepack to be prompted to install these packages.
    </para>
    <para>
      2. Bill wants to create a service pack named kdegames.servicepack for his new system which does not have
      an internet connection. He generates a list of packages on his system using pk-generate-package-list
      and copies that list to his USB key. He then gives that USB to Rishi who has a good internet connectivity.
      Rishi runs the following command on his system:
    </para>
    <para>
      [rishi@devils-temple:~]$pkgenpack --with-package-list /media/USB/package-list.txt /home/rishi/Desktop/kdegames.servicepack kdegames
    </para>
    <para>
      This generates a service pack, kdegames.servicepack, on Rishi's Desktop, which can be distributed
      to Bill and users with similar requirements.
    </para>
  </refsect1>
  <refsect1>
    <title>Installing A Service Pack</title>
    <para>
      Service Packs can be installed using pkcon by specifying the valid path. For example:
    </para>
    <para>
      [hacker@tim-lounge:~]$pkcon install /home/USB/TimPacks/valgrind.servicepack
    </para>
  </refsect1>
  <refsect1>
    <title>See Also</title>
    <para>pkmon (1). pkcon(1).</para>
  </refsect1>
  <refsect1>
    <title>Author</title>
    <para>
      This manual page was written by Shishir Goel <email>crazyontheedge@gmail.com</email>.
    </para>
  </refsect1>
</refentry>
